name: JDBC
on:
  push:
  pull_request:
  workflow_dispatch:
  repository_dispatch:

env:
  GH_TOKEN: ${{ secrets.GH_TOKEN }}
  OVERRIDE_GIT_DESCRIBE: ${{ inputs.override_git_describe }}

jobs:
  odbc-linux-amd64:
    name: ODBC Linux (amd64)
    runs-on: ubuntu-latest
    container:
      image: quay.io/pypa/manylinux2014_x86_64
    env:
      GEN: ninja
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ inputs.git_ref }}

      - uses: ./.github/actions/manylinux_2014_setup
        with:
          ninja-build: 1
          ccache: 1
          python_alias: 1
          aws-cli: 1

      - name: Build
        shell: bash
        run: make release

      - name: ODBC Tests
        shell: bash
        if: ${{ inputs.skip_tests != 'true' }}
        run: make test
      - name: Deploy
        shell: bash
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.S3_DUCKDB_STAGING_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.S3_DUCKDB_STAGING_KEY }}
        run: |
          zip -j duckdb_odbc-linux-amd64.zip build/release/libduckdb_odbc.so linux_setup/unixodbc_setup.sh linux_setup/update_odbc_path.py
         ./scripts/upload-assets-to-staging.sh github_release duckdb_odbc-linux-amd64.zip
      - uses: actions/upload-artifact@v3
        with:
          name: odbc-linux-amd64
          path: |
            duckdb_odbc-linux-amd64.zip

  odbc-linux-aarch64:
    name: ODBC Linux (aarch64)
    runs-on: ubuntu-latest
    container:
      image: ubuntu:18.04
 #   needs: odbc-linux-amd64
    env:
      GEN: ninja
      DUCKDB_PLATFORM: linux_arm64
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ inputs.git_ref }}

      - uses: ./.github/actions/ubuntu_18_setup
        with:
          ccache: 1
          aarch64_cross_compile: 1

      - name: Build
        shell: bash
        run: CC=aarch64-linux-gnu-gcc CXX=aarch64-linux-gnu-g++ make release

      - name: Deploy
        shell: bash
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.S3_DUCKDB_STAGING_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.S3_DUCKDB_STAGING_KEY }}
        run: |
          cp build/release/duckdb_jdbc.jar duckdb_jdbc-linux-aarch64.jar
         # ./scripts/upload-assets-to-staging.sh github_release duckdb_jdbc-linux-aarch64.jar

      - uses: actions/upload-artifact@v3
        with:
          name: java-linux-aarch64
          path: |
            build/release/duckdb_jdbc.jar


  odbc-windows-amd64:
    name: ODBC Windows (amd64)
    runs-on: windows-latest
  #  needs: odbc-linux-amd64
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ inputs.git_ref }}
      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      - name: Setup Ccache
        uses: hendrikmuhs/ccache-action@main
        with:
          key: ${{ github.job }}
          save: ${{ github.ref == 'refs/heads/main' || github.repository != 'duckdb/duckdb-java' }}

      - name: Build
        shell: bash
        run: make release

      - name: ODBC Tests
        if: ${{ inputs.skip_tests != 'true' }}
        shell: bash
        run: |
          ls -R .
          make test

      - name: Deploy
        shell: bash
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.S3_DUCKDB_STAGING_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.S3_DUCKDB_STAGING_KEY }}
        run: |
          cp build/release/duckdb_jdbc.jar duckdb_jdbc-windows-amd64.jar
          ./scripts/upload-assets-to-staging.sh github_release duckdb_jdbc-windows-amd64.jar
      - uses: actions/upload-artifact@v3
        with:
          name: java-windows-amd64
          path: |
            build/release/duckdb_jdbc.jar


  odbc-osx-universal:
    name: ODBC OSX (Universal)
    runs-on: macos-14
#    needs: odbc-linux-amd64
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ inputs.git_ref }}
      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      - name: Setup Ccache
        uses: hendrikmuhs/ccache-action@main
        with:
          key: ${{ github.job }}
          save: ${{ github.ref == 'refs/heads/main' }}
      - name: Build
        shell: bash
        run: make release
      - name: ODBC Tests
        if: ${{ inputs.skip_tests != 'true' }}
        shell: bash
        run: make test
      - name: See if this actually universal
        shell: bash
        run: lipo -archs build/release/libduckdb_odbc.dylib | grep "x86_64 arm64"
      - name: Deploy
        shell: bash
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.S3_DUCKDB_STAGING_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.S3_DUCKDB_STAGING_KEY }}
        run: |
          cp build/release/duckdb_jdbc.jar duckdb_jdbc-osx-universal.jar
          ./scripts/upload-assets-to-staging.sh github_release duckdb_jdbc-osx-universal.jar
      - uses: actions/upload-artifact@v3
        with:
          name: java-osx-universal
          path: |
            build/release/duckdb_jdbc.jar


